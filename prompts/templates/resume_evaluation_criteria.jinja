You are evaluating a resume for a Software Intern position at HackerRank. Analyze the resume data and provide scores based on these criteria:

**MANDATORY: You MUST always fill ALL FOUR categories: open_source, self_projects, production, technical_skills, scholarship_mentorship.**

## CRITICAL FAIRNESS REQUIREMENTS
**SCORES MUST NEVER DEPEND ON:**
- Candidate's name, gender, or personal demographic information
- College, university, or educational institution name
- CGPA, GPA, or academic grades
- City, location, or geographical information
- Any personal characteristics unrelated to technical skills and experience

**EVALUATION MUST BE BASED ONLY ON:**
- Technical skills and programming languages
- Project complexity and real-world impact
- Open source contributions and community involvement
- Work experience and production-level contributions
- Technical communication and documentation abilities
- Problem-solving and algorithmic thinking demonstrated in projects

## PROGRAM DISTINCTIONS
- "Google Summer of Code (GSoC)" and "Girl Script Summer of Code" are COMPLETELY DIFFERENT programs
- NEVER use "GSoC" as shorthand for "Girl Script Summer of Code"
- When you see "Girl Script Summer of Code" in the resume, refer to it as "Girl Script Summer of Code"
- When you see "Google Summer of Code" in the resume, refer to it as "Google Summer of Code (GSoC)"

## ANALYSIS INSTRUCTIONS
- Analyze the structured resume data (basics, work, volunteer, projects, skills, etc.)
- Use GitHub data (if provided in === GITHUB DATA === section) as additional context
- Use blog data (if provided in === BLOG DATA === section) for technical communication assessment

## SCORING CRITERIA

### Open Source (0-35 points)
**HIGH SCORES (25-35 points):**
- Contributions to popular open source projects (1000+ stars)
- Significant contributions to well-known projects
- Google Summer of Code (GSoC) participation
- Substantial community involvement

**MEDIUM SCORES (15-24 points):**
- Contributions to smaller open source projects
- Active GitHub presence with meaningful contributions to other repositories
- Participation in open source programs

**LOW SCORES (5-10 points):**
- Only personal GitHub repositories with no contributions to other projects
- Minimal open source activity
- Basic GitHub presence
- **CRITICAL**: Hacktoberfest participation alone (without evidence of contributions to significant projects) should receive 3-5 points maximum

**VERY LOW SCORES (0-4 points):**
- No GitHub presence
- Only very basic personal repositories
- Repositories that are clearly tutorial-based with no community involvement

**CRITICAL RULES:**
- Having personal GitHub repositories does NOT constitute open source contribution
- True open source contribution means contributing to OTHER people's projects
- When GitHub data shows all projects are 'self_project' type, open source score MUST be 10 points or less

### Self Projects (0-30 points)
**HIGH SCORES (20-30 points):**
- Complex projects with real-world impact
- Advanced architecture, multiple technologies
- User adoption or contributions to popular open source projects

**MEDIUM SCORES (10-19 points):**
- Projects with some complexity, good documentation
- Multiple features or moderate technical challenge

**LOW SCORES (1-9 points):**
- Simple tutorial projects (todo lists, calculators, basic CRUD apps, weather apps, note-taking apps, recipe apps, exercise apps)
- Basic sentiment analysis using standard libraries (NLTK, scikit-learn)
- Classroom assignments or projects with minimal technical complexity

**ZERO SCORES (0 points):**
- No projects or only extremely basic projects that demonstrate no technical skills

**PROJECT LINK REQUIREMENTS:**
- **NO LINKS**: Projects without URLs, GitHub links, or live demos should receive 30-50% lower scores
- **INACTIVE LINKS**: Projects with broken links should receive 20-30% lower scores
- **LIVE DEMO BONUS**: Projects with working live demos should receive 10-20% higher scores

### Production (0-25 points)
- Analyze the 'work' and 'volunteer' sections for real-world, internship, or production experience
- **SPECIAL CONSIDERATION**: Give extra points for founder roles, co-founder positions, or early-stage engineer roles (first 10-20 employees) at startups

### Scholarship & Mentorship (0-10 points)
**HIGH SCORES (7-10 points):**
- Prestigious, well-known scholarships (e.g., national/international academic awards).
- Recognized mentorship roles in formal programs (e.g., community or technical mentoring).

**MEDIUM SCORES (4-6 points):**
- University-level scholarships or academic honors.
- Significant achievements in academic competitions.

**LOW SCORES (1-3 points):**
- Minor awards or honorable mentions.

**ZERO SCORES (0 points):**
- No scholarships, mentorships, or relevant awards listed.

### Technical Skills (0-10 points)
- Analyze the 'skills', 'languages', and evidence of technical breadth or problem-solving in projects, work, or competitions

## PROJECT COMPLEXITY ASSESSMENT

**Simple/Basic Projects (Low Impact):**
- Todo list applications, calculators, basic CRUD applications
- Weather apps using public APIs, note-taking applications
- Simple portfolio websites, basic form applications
- "Hello World" applications, classroom assignment projects
- Tutorial-based projects, recipe sharing applications
- Exercise/health apps using public APIs
- Basic sentiment analysis using standard libraries
- Simple e-commerce applications, basic social media clones

**Complex/Advanced Projects (High Impact):**
- Full-stack applications with multiple features
- Projects with user authentication and databases
- Machine learning or AI applications
- Real-time applications (chat, streaming, etc.)
- Mobile applications with native features
- Projects with microservices architecture
- Contributions to popular open source projects
- Projects with significant user adoption
- Projects solving real-world problems
- Projects demonstrating advanced algorithms or data structures

## BONUS POINTS (Maximum total: 20 points)
- +5 points for Google Summer of Code (GSoC) participation
- +3 points for Girl Script Summer of Code participation
- +3-5 points for startup founder/co-founder experience
- +2-3 points for early-stage engineer experience (first 10-20 employees at a startup)
- +2 points for portfolio website (GitHub URL in basics.url)
- +1 point for LinkedIn profile
- +1-3 points for high-quality technical blogs (if blog data provided)

**CRITICAL**: The total bonus points cannot exceed 20 points under any circumstances.

## DEDUCTIONS
**For Simple Projects:**
- -2 to -5 points if resume contains only simple tutorial projects
- -1 to -3 points for each simple project beyond the first one
- -1 point for projects with generic names like "Calculator", "Todo App", "Weather App"
- -2 points if all projects are classroom assignments or tutorial-based

**For Projects Without Links:**
- -3 to -5 points for each project without any GitHub link, live demo, or active URL
- -2 to -3 points for each project with only GitHub link but no live demo
- -1 to -2 points for each project with broken or inactive links

**CRITICAL ENFORCEMENT:**
- When GitHub data shows all projects are 'self_project' type, apply 3-5 point deductions for lack of true open source contributions
- For candidates with only personal GitHub repositories, open source score should NEVER exceed 10 points
- For candidates with only tutorial-based projects, self_projects score should NEVER exceed 15 points

## CRITICAL REQUIREMENTS
1. You MUST respond with ONLY the JSON structure below - no summary, no other fields
2. You MUST fill ALL FOUR score categories: open_source, self_projects, production, technical_skills
3. You MUST provide evidence for each score
4. You MUST NOT add any other fields like "summary", "skills", "experience", etc.
5. You MUST NOT change the field names or structure

**IMPORTANT LIST CONSTRAINTS:**
- key_strengths: Provide 1-5 items (maximum 5 key strengths)
- areas_for_improvement: Provide 1-3 items (maximum 3 areas for improvement)

**IMPORTANT SCORE CONSTRAINTS:**
- Evidence fields cannot be empty string
- All category scores must be >= 0 (cannot be negative)
- **CATEGORY SCORE LIMITS** (CANNOT be exceeded under any circumstances):
  - open_source: 0-35 points (maximum 35)
  - self_projects: 0-30 points (maximum 30)
  - production: 0-25 points (maximum 25)
  - technical_skills: 0-10 points (maximum 10)
  - scholarship_mentorship: 0-10 points (maximum 10)
- Bonus points total must be <= 20 (maximum 20 points)
- **OVERALL SCORE LIMIT**: The total score (categories + bonus - deductions) cannot exceed 120 points

**DO NOT RETURN A RESUME SUMMARY. RETURN ONLY THE SCORING EVALUATION IN THE SPECIFIED JSON FORMAT.**

Analyze the following resume and provide a JSON response with this EXACT structure (all fields are required):

{
    "scores": {
        "open_source": {"score": 0, "max": 35, "evidence": "string"},
        "self_projects": {"score": 0, "max": 30, "evidence": "string"},
        "production": {"score": 0, "max": 25, "evidence": "string"},
        "technical_skills": {"score": 0, "max": 10, "evidence": "string"}
        "scholarship_mentorship": {"score": 0, "max": 10, "evidence": "string"}
    },
    "bonus_points": {"total": 0, "breakdown": "string"},
    "deductions": {"total": 0, "reasons": "string"},
    "key_strengths": ["strength1", "strength2", "strength3", "strength4", "strength5"],
    "areas_for_improvement": ["improvement1", "improvement2", "improvement3"]
}

Resume to evaluate:

{{ text_content }}